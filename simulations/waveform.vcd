$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 ( clk $end
  $var wire 33 0 icache2pf_i [32:0] $end
  $var wire 35 , if2pf_i [34:0] $end
  $var wire 36 4 mmu2pf_i [35:0] $end
  $var wire 35 . pf2icache_o [34:0] $end
  $var wire  4 * pf2if_ctrl_o [3:0] $end
  $var wire 32 + pf2if_data_o [31:0] $end
  $var wire 33 2 pf2mmu_o [32:0] $end
  $var wire  1 ) rst_n $end
  $scope module $unit $end
   $var wire 32 = CSR_MTVEC_BASE_ALIGN_DIRECT [31:0] $end
   $var wire 32 < CSR_MTVEC_BASE_ALIGN_VECTOR [31:0] $end
   $var wire 32 = CSR_STVEC_BASE_ALIGN_DIRECT [31:0] $end
   $var wire 32 < CSR_STVEC_BASE_ALIGN_VECTOR [31:0] $end
   $var wire 32 _ DCACHE_ADDR_WIDTH [31:0] $end
   $var wire 32 _ DCACHE_DATA_WIDTH [31:0] $end
   $var wire 32 a DCACHE_IDX_BITS [31:0] $end
   $var wire 32 ` DCACHE_LINE_WIDTH [31:0] $end
   $var wire 32 e DCACHE_NO_OF_SETS [31:0] $end
   $var wire 32 a DCACHE_OFFSET_BITS [31:0] $end
   $var wire 32 f DCACHE_TAG_BITS [31:0] $end
   $var wire 32 g DCACHE_TAG_LSB [31:0] $end
   $var wire 32 ^ DTLB_ENTRIES [31:0] $end
   $var wire 32 ? DTLB_WIDTH [31:0] $end
   $var wire 32 ? EXC_CODE_WIDTH [31:0] $end
   $var wire 32 _ ICACHE_ADDR_WIDTH [31:0] $end
   $var wire 32 _ ICACHE_DATA_WIDTH [31:0] $end
   $var wire 32 b ICACHE_IDX_BITS [31:0] $end
   $var wire 32 ` ICACHE_LINE_WIDTH [31:0] $end
   $var wire 32 ` ICACHE_NO_OF_SETS [31:0] $end
   $var wire 32 a ICACHE_OFFSET_BITS [31:0] $end
   $var wire 32 c ICACHE_TAG_BITS [31:0] $end
   $var wire 32 d ICACHE_TAG_LSB [31:0] $end
   $var wire 32 ? IRQ_CODE_WIDTH [31:0] $end
   $var wire 32 L MIE_MASK [31:0] $end
   $var wire 32 K MIE_MEIP [31:0] $end
   $var wire 32 G MIE_MSIP [31:0] $end
   $var wire 32 I MIE_MTIP [31:0] $end
   $var wire 32 J MIE_SEIP [31:0] $end
   $var wire 32 F MIE_SSIP [31:0] $end
   $var wire 32 H MIE_STIP [31:0] $end
   $var wire 32 L MIP_MASK [31:0] $end
   $var wire 32 > MODE_BIT [31:0] $end
   $var wire 32 Y MODE_SV32 [31:0] $end
   $var wire 32 E M_EXT_INT_IDX [31:0] $end
   $var wire 32 A M_SOFT_INT_IDX [31:0] $end
   $var wire 32 C M_TIMER_INT_IDX [31:0] $end
   $var wire 32 X SATP_ASID_MASK [31:0] $end
   $var wire 32 Z SATP_ASID_WIDTH [31:0] $end
   $var wire 32 Y SATP_MODE_WIDTH [31:0] $end
   $var wire 32 [ SATP_PPN_WIDTH [31:0] $end
   $var wire 32 M SIE_MASK [31:0] $end
   $var wire 32 F SIE_SSIP [31:0] $end
   $var wire 32 M SIP_MASK [31:0] $end
   $var wire 32 F SIP_SSIP [31:0] $end
   $var wire 32 V SSTATUS_READ_MASK [31:0] $end
   $var wire 32 W SSTATUS_WRITE_MASK [31:0] $end
   $var wire 32 Q STATUS_FS [31:0] $end
   $var wire 32 T STATUS_MXR [31:0] $end
   $var wire 32 U STATUS_SD [31:0] $end
   $var wire 32 F STATUS_SIE [31:0] $end
   $var wire 32 H STATUS_SPIE [31:0] $end
   $var wire 32 O STATUS_SPP [31:0] $end
   $var wire 32 S STATUS_SUM [31:0] $end
   $var wire 32 N STATUS_UBE [31:0] $end
   $var wire 32 P STATUS_VS [31:0] $end
   $var wire 32 R STATUS_XS [31:0] $end
   $var wire 32 D S_EXT_INT_IDX [31:0] $end
   $var wire 32 @ S_SOFT_INT_IDX [31:0] $end
   $var wire 32 B S_TIMER_INT_IDX [31:0] $end
   $var wire 32 ? TLB_ENTRIES [31:0] $end
   $var wire 32 ] TVEC_BASE_WIDTH [31:0] $end
   $var wire 32 \ TVEC_MODE_WIDTH [31:0] $end
  $upscope $end
  $scope module prefetch $end
   $var wire  1 ( clk $end
   $var wire 32 7 data_in [31:0] $end
   $var wire 32 6 data_out [31:0] $end
   $var wire 32 # fetch_fifo[0] [31:0] $end
   $var wire 32 $ fetch_fifo[1] [31:0] $end
   $var wire  1 : fifo_clr $end
   $var wire  1 ; fifo_update $end
   $var wire  2 % fifo_valid [1:0] $end
   $var wire 33 0 icache2pf_i [32:0] $end
   $var wire 35 , if2pf_i [34:0] $end
   $var wire 36 4 mmu2pf_i [35:0] $end
   $var wire 32 & pc_fifo [31:0] $end
   $var wire  1 9 pc_hword $end
   $var wire 32 8 pc_incr [31:0] $end
   $var wire 35 . pf2icache_o [34:0] $end
   $var wire  4 * pf2if_ctrl_o [3:0] $end
   $var wire 32 + pf2if_data_o [31:0] $end
   $var wire 33 2 pf2mmu_o [32:0] $end
   $var wire  1 ) rst_n $end
   $var wire  1 ' stall $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b11111100110001000111000101010011 #
b01101111100111100001011100100001 $
b01 %
b11011111100011001010111111000101 &
1'
1(
1)
b0010 *
b11111100110001000001011100100001 +
b10110010010000101111000001101111000 ,
b11011111010110111111110011101101100 .
b111001010101001001001111010110110 0
b110111111000110010101111110001011 2
b111101111101011011111111001110110111 4
b11111100110001000001011100100001 6
b00000000000000000000000000010011 7
b00000000000000000000000000000010 8
19
1:
1;
b00000000000000000000000000000110 <
b00000000000000000000000000000010 =
b00000000000000000000000000000000 >
b00000000000000000000000000000100 ?
b00000000000000000000000000000001 @
b00000000000000000000000000000011 A
b00000000000000000000000000000101 B
b00000000000000000000000000000111 C
b00000000000000000000000000001001 D
b00000000000000000000000000001011 E
b00000000000000000000000000000010 F
b00000000000000000000000000001000 G
b00000000000000000000000000100000 H
b00000000000000000000000010000000 I
b00000000000000000000001000000000 J
b00000000000000000000100000000000 K
b00000000000000000000101010101010 L
b00000000000000000000001000100010 M
b00000000000000000000000001000000 N
b00000000000000000000000100000000 O
b00000000000000000000011000000000 P
b00000000000000000110000000000000 Q
b00000000000000011000000000000000 R
b00000000000001000000000000000000 S
b00000000000010000000000000000000 T
b10000000000000000000000000000000 U
b10000000000011011110011101100010 V
b00000000000011000110000100100010 W
b10000000001111111111111111111111 X
b00000000000000000000000000000001 Y
b00000000000000000000000000001001 Z
b00000000000000000000000000010110 [
b00000000000000000000000000000010 \
b00000000000000000000000000011110 ]
b00000000000000000000000000010000 ^
b00000000000000000000000000100000 _
b00000000000000000000000010000000 `
b00000000000000000000000000000100 a
b00000000000000000000000000000111 b
b00000000000000000000000000010101 c
b00000000000000000000000000001011 d
b00000000000000000000000000010000 e
b00000000000000000000000000011000 f
b00000000000000000000000000001000 g
#1
0(
#2
b00000000000000000000000000010011 #
b11111100110001000111000101010011 $
b11 %
b10110010010000101111000001110001 &
0'
1(
b0011 *
b00000000000000000111000101010011 +
b101100100100001011110000011100011 2
b00000000000000000111000101010011 6
#3
0(
#4
b00000000000000000000000000010011 $
1(
b00000000000000000000000000010011 +
b00000000000000000000000000010011 6
#5
0(
#6
1(
0)
b10000000000000000000000000000000100 ,
09
#7
0(
b00000000000000000000000000000100 8
#8
b10000000000000000000000000000100 &
1(
b100000000000000000000000000001001 2
#9
0(
#10
1(
#11
0(
#12
1(
#13
0(
#14
1(
#15
0(
#16
1(
#17
0(
#18
1(
#19
0(
#20
1(
#21
0(
#22
1(
#23
0(
#24
1(
#25
0(
#26
1(
#27
0(
#28
1(
#29
0(
#30
1(
#31
0(
#32
1(
#33
0(
#34
1(
#35
0(
#36
1(
#37
0(
#38
1(
#39
0(
#40
1(
#41
0(
#42
1(
#43
0(
#44
1(
#45
0(
#46
1(
#47
0(
#48
1(
#49
0(
#50
1(
#51
0(
#52
1(
#53
0(
#54
1(
#55
0(
#56
1(
#57
0(
#58
1(
#59
0(
#60
1(
#61
0(
#62
1(
#63
0(
#64
1(
#65
0(
#66
1(
#67
0(
#68
1(
#69
0(
#70
1(
#71
0(
#72
1(
#73
0(
#74
1(
#75
0(
#76
1(
#77
0(
#78
1(
#79
0(
#80
1(
#81
0(
#82
1(
#83
0(
#84
1(
#85
0(
#86
1(
#87
0(
#88
1(
#89
0(
#90
1(
#91
0(
#92
1(
#93
0(
#94
1(
#95
0(
#96
1(
#97
0(
#98
1(
#99
0(
